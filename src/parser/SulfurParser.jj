options {
  STATIC=false;
}

PARSER_BEGIN(SulfurParser)

package parser;

import ast.*;public class SulfurParser {

}

PARSER_END(SulfurParser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EOL : "\n" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}

Exp Start():
{ Exp e; }
{
   e = Expr() <EOL> { return e; }
}

Exp Expr() :
{ Exp e1, e2; }
{
   e1 = Term()
   ( <PLUS> e2 = Term() { return new ASTAdd(e1, e2); }
   | <MINUS> e2 = Term() { return new ASTMinus(e1, e2); }
   )*
   { return e1; }
}

Exp Term() :
{ Exp e1, e2; }
{
    e1 = Fact()
    ( <TIMES> e2 = Fact() { return new ASTMult(e1, e2); }
    | <DIV> e2 = Fact() { return new ASTDiv(e1, e2); }
    )*
    { return e1; }
}

Exp Fact() :
{ Token x; Exp e; }
{
    x = <Num> { return new ASTNum(Integer.parseInt(x.image)); }
 |
   <LPAR> e = Expr() <RPAR> { return e; }
}